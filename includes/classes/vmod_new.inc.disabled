<?php

  class vmod {
    private $_version = '1.0';
    private $_cache_directory = '';
    private $_alias_paths = array();
    private $_protected_files = array();
    private $_last_modified = 0;
    private $_system_root = FS_DIR_HTTP_ROOT . WS_DIR_HOME;
    private $_vmods = array();
    private $_vmods_directory = FS_DIR_HTTP_ROOT . WS_DIR_INCLUDES . 'vmods/';
    private $_mods = array();
    private $_filesModded = array();
    
    public static function initialize() {
    
      self::$_vmods = array();
      
    // Get last modified timestamps for comparison
      $patch_files = glob(self::$_vmods_directory . '*.xml');
      if (is_array($vmod_files)) {
        foreach ($patch_files as $file) {
          $last_modified = filemtime($file);
          if ($last_modified > self::$_last_modified){
            self::$_last_modified = $last_modified;
          }
        }
      }
      
      $folder_last_modified = filemtime(self::$_vmods_directory);
      if ($folder_last_modified > self::$_last_modified){
        self::$_last_modified = $folder_last_modified;
      }
      
    // Load XML patches
      $cache_file = self::$_cache_directory . 'vmod.cache';
      if (file_exists($cache_file) && filemtime($cache_file) >= self::$_last_modified) {
        self::$_vmods = unserialize(file_get_contents($cache_file));
      } else {
        self::$_last_modified = time();
        foreach ($patch_files as $file) {
          self::_load_xml_patch($file);
        }
        file_put_contents($cache_file, serialize(self::$_vmods));
      }
    }
    
    private static function _load_xml_patch($file) {
      
      $xml = simplexml_load_string(file_get_contents($file));
      
      if (empty($xml->getName()) || $xml->getName() != 'vmod') {
        trigger_error(__CLASS__.':'.__METHOD__.' - Not a valid vmod file ('. $file .')', E_USER_WARNING);
        return;
      }
      
      $vqmver = $xml->vqmver;
      if (!empty($xml->vmod_version) && !empty($xml->vmod_version->attributes()->required)) {
        if (version_compare(self::$_version, $xml->vmod_version, '<')) {
          trigger_error(__CLASS__.':'.__METHOD__.' - Vmod patch ('. $file .') requires vmod '. $xml->vmod_version . '" or above and has been skipped', E_USER_WARNING);
          return;
        }
      }
      
      foreach($xml->modifications->file as $file) {
        
        $files = glob((string)$operation->attributes()->src);
        if (empty($files)) {
          trigger_error('Vmod did not match any files ('. (string)$operation->attributes()->src .')', E_USER_WARNING);
          continue;
        }
        
        foreach ($files as $file) {
          foreach($file->operation as $operation) {
            
            if (is_dir($file)) {
              trigger_error('Vmod cannot match a directory ('. (string)$file .')', E_USER_WARNING);
              continue;
            }
            
            self::$_mods[$file]['operations'][] = array(
              'name' => (string)$xml->name,
              'search' => (string)$operation->search,
              'insert' => (string)$operation->insert,
              'position' => (string)$operation->insert->attributes()->position,
            );
          }
        }
      }
    }
    
    private static function check($source_file) {
      
      $source_file = str_replace("\\", '/', realpath($source_file));
      
      if (empty($source_file) || !is_file($source_file) || in_array($source_file, self::$_protected_files)) {
        return $source_file;
      }
      
      $cache_file = self::_get_cache_file($source_file);
      $last_modified = filemtime($source_file);
      
      if (file_exists($cache_file) && filemtime($cache_file) >= self::$_last_modified && filemtime($cache_file) >= $last_modified) {
        return $cache_file;
      }
      
      if (isset(self::$_filesModded[$source_file])) {
        return self::$_filesModded[$source_file]['cached'] ? $cache_file : $source_file;
      }
      
      $changed = false;
      $buffer = file_get_contents($source_file);
      
      foreach (self::$_mods as $file => $mod) {
        if ($file == $source_file) {
          self::patch($mod, $buffer);
        }
      }
      
      if (sha1($buffer) != sha1_file($source_file)) {
        $writePath = $cache_file;
        if (!file_exists($writePath) || is_writable($writePath)) {
          file_put_contents($writePath, $buffer);
          $changed = true;
        }
      }

      self::$_filesModded[$source_file] = array('cached' => $changed);
      return $changed ? $writePath : $source_file;
    }
    
    private static function patch($mod, $buffer) {
      
      foreach ($mod['operations'] as $operation) {
        
        $search_regex = preg_split("#\R+#", trim($mod['search'])); // Convert multiple lines to array
        foreach(array_keys($search_regex) as $key) $search_regex[$key] = preg_quote(trim($search_regex[$key]), '#'); // Turn line into regular expression
        $search_regex = implode('\\s+', $search_regex); // Glue
        
        switch($mod['position']) {
          case 'ibefore':
            return preg_replace("#(" . $search_regex . ")#", '$1' . $mod['insert'], $buffer);
          case 'iafter':
            return preg_replace("#(" . $search_regex . ")#", preg_replacement_quote($mod['insert']) . '$1', $buffer);
          case 'before':
            return preg_replace("#(\\s+?" . $search_regex . "\\s+?)#", '$1' . $mod['insert'], $buffer);
          case 'iafter':
            //return preg_replace($search_regex, str_replace(array('$', "\\"), array('\$', "\\\\"), $mod['insert']) . '$1', $tmp);
            return preg_replace("#(\\s+?" . $search_regex . "\\s+?)#", preg_replacement_quote($mod['insert']) . '$1', $buffer);
          case 'replace':
            return preg_replace($search_regex, $mod['insert'], $buffer);
          default:
            trigger_error('Unknown patch method', E_USER_ERROR);
        }
      }
    }
    
	  private static function _get_cache_file($file) {
		  return self::$_cachePathFull . 'vmod-' . preg_replace('#[/\\\\]+#', '_', preg_replace('#^' . preg_quote(self::getCwd(), '#i') . '#', '', $file));
	  }
    
    public static function path($path, $skip_real = false) {
      $tmp = self::$_cwd . $path;
      $realpath = $skip_real ? $tmp : self::_realpath($tmp);
      if(!$realpath) {
        return false;
      }
      return $realpath;
    }
  }